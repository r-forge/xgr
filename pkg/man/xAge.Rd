% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xAge.r
\name{xAge}
\alias{xAge}
\title{Function to compare evolutionary history age of genes based on their Phylostratigraphy}
\usage{
xAge(list_vec, identity = c("Symbol", "GeneID"), p.type = c("nominal",
"empirical"), seed = 825, nperm = 2000, p.adjust.method = c("BH",
"BY", "bonferroni", "holm", "hochberg", "hommel"), plot = FALSE,
RData.location = "http://galahad.well.ox.ac.uk/bigdata")
}
\arguments{
\item{list_vec}{a named vector containing human genes (gene symbol).
Alternatively it can be a list of named vectors}

\item{identity}{the entity of input data. It can be either "Symbol" or
"GeneID"}

\item{p.type}{the type of the p-value calcualted. It can be 'nominal'
for nominal p-value (calculated using two-sample Wilcoxon rank sum
tests) or 'empirical' for empirical p-value (based on the test
statistic 'Gene Evolutionary Age Cumulative Ranking')}

\item{seed}{an integer specifying the seed}

\item{nperm}{the number of random permutations}

\item{p.adjust.method}{the method used to adjust p-values. It can be
one of "BH", "BY", "bonferroni", "holm", "hochberg" and "hommel". The
first two methods "BH" (widely used) and "BY" control the false
discovery rate (FDR: the expected proportion of false discoveries
amongst the rejected hypotheses); the last four methods "bonferroni",
"holm", "hochberg" and "hommel" are designed to give strong control of
the family-wise error rate (FWER). Notes: FDR is a less stringent
condition than FWER}

\item{plot}{logical to indicate whether violin plot is drawn}

\item{RData.location}{the characters to tell the location of built-in
RData files. See \code{\link{xRDataLoader}} for details}
}
\value{
a list with three componets:
\itemize{
\item{\code{df_summary}: a data frame of n x 7, where n is the number
of named vectors, and the 5 columns are "name", "num" (i.e. number of
genes used for calculation), "observed" (i.e. average gene age for
input/observed genes), "other" (i.e. average gene age for the other
genes), "ratio" (i.e. the observed divided by the other), "pval" (i.e.
p-value), "fdr" (if multiple vectors provided)}
\item{\code{ls_gp_violin}: NULL if the plot is not drawn; otherwise, a
list of 'ggplot' objects for violet plot}
\item{\code{ls_gp_pdf}: NULL if the plot is not drawn; otherwise, a
list of 'ggplot' objects for pdf plot for null distribution of age
together with a vertical line for observed age}
}
}
\description{
\code{xAge} is supposed to compare evolutionary history age of genes
based on their Phylostratigraphy.
}
\note{
none
}
\examples{
\dontrun{
# Load the library
library(XGR)
}

RData.location <- "http://galahad.well.ox.ac.uk/bigdata"
\dontrun{
# ExAC LoF intolerant
ExAC <- xRDataLoader('ExAC', RData.location=RData.location)
data <- subset(ExAC, pLI>0.9)$gene
# based on two-sample Wilcoxon rank sum tests
res <- xAge(data, p.type="nominal", plot=TRUE,
RData.location=RData.location)
res$ls_gp_violin[[1]]
# based on the test statistic 'Gene Evolutionary Age Cumulative Ranking'
res <- xAge(data, p.type="empirical", nperm=10000, plot=TRUE,
RData.location=RData.location)
res$ls_gp_violin[[1]]
res$ls_gp_pdf[[1]]

# Genetic regulators 
Haploid <- xRDataLoader('Haploid_regulators',
RData.location=RData.location)
# positive regulators
df <- subset(Haploid, MI<0 & Phenotype!='HMGCR')
ls_group <- split(x=df$Gene, f=df$Phenotype)
ls_res <- xAge(ls_group, plot=TRUE, RData.location=RData.location)
ls_res$df_summary
gridExtra::grid.arrange(grobs=ls_res$ls_gp_violin[1:4], ncol=2)

####################################################################
## advanced further analysis comparing multiple groups
ls_df <- lapply(ls_res$ls_gp_violin, function(x) x$data)
res_df <- do.call(rbind, ls_df)

#################
res_df$data <- factor(res_df$data, levels=c("observed","other"))
# 1) facet by group
p <- ggpubr::ggviolin(res_df, x="data", y="Phylostrata",
color="transparent", fill="group", facet.by="group",
short.panel.labs=T, add="boxplot", add.params=list(width=0.05,
fill='transparent', color="black")) + theme(legend.position='none') +
ggpubr::stat_compare_means(label=c("p.format","p.signif")[1],label.y=18,label.x=1.3)
# 2) all group
yintercept <- as.data.frame(res_df \%>\% dplyr::group_by(data) \%>\%
dplyr::summarise(median(Phylostrata)))[,2]
p <- ggpubr::ggviolin(res_df, x="data", y="Phylostrata",
color="transparent", fill="data", add="boxplot",
add.params=list(width=0.02, fill='transparent', color="black")) +
theme(legend.position='none') +
ggpubr::stat_compare_means(aes(group=data),label=c("p.format","p.signif")[1],label.y=18,label.x=1.4)
+ geom_hline(yintercept=yintercept, linetype=2)

#################
# 3) Pairwise comparison against all
df <- res_df \%>\% dplyr::filter(data!="other")
ggpubr::compare_means(Phylostrata ~ group, data=df, ref.group=".all.",
method="wilcox.test", p.adjust.method="BH")
p <- ggpubr::ggviolin(df, x="group", y="Phylostrata",
color="transparent", fill="group", add="boxplot",
add.params=list(width=0.05, fill='transparent', color="black")) +
theme(legend.position='none') +
ggpubr::stat_compare_means(method="anova", label.y=18) +
ggpubr::stat_compare_means(label="p.signif", label.y=18,
method="wilcox.test", ref.group=".all.", hide.ns=T) +
geom_hline(yintercept=median(df$Phylostrata), linetype=2)

#################
# 4) Pairwise comparison against each other
df <- res_df \%>\% dplyr::filter(data!="other")
df_pair <- ggpubr::compare_means(Phylostrata ~ group, data=df,
method="wilcox.test", p.adjust.method="BH")
df_pair <- as.data.frame(df_pair \%>\% dplyr::filter(p.adj < 0.05)
\%>\% dplyr::select(group1,group2))
my_comparisons <- lapply(1:nrow(df_pair), function(i)
paste0(df_pair[i,]))
ggpubr::ggviolin(df, x="group", y="Phylostrata", color="transparent",
fill="group", add="boxplot", add.params=list(width=0.05,
fill='transparent', color="black")) + theme(legend.position='none') +
ggpubr::stat_compare_means(label="p.format", method="wilcox.test",
comparisons=my_comparisons) +
geom_hline(yintercept=median(df$Phylostrata), linetype=2)

#################
# 5) Multiple pairwise tests against a reference group
df1 <- res_df \%>\% dplyr::filter(data!="other")
df2 <- res_df \%>\% dplyr::filter(data=="other") \%>\%
dplyr::mutate(group=data)
## genes not found in any group
df2 <- as.data.frame(df2 \%>\% dplyr::group_by(Symbol) \%>\%
dplyr::group_by(num=n(),add=T) \%>\%
dplyr::filter(num==length(table(df1$group))))
df2 <- df2 \%>\% dplyr::select(-num)
## remove duplicated genes
df2 <- df2[!duplicated(df2$Symbol),]
df <- rbind(df1, df2)
ggpubr::compare_means(Phylostrata ~ group, data=df, ref.group="other",
method="wilcox.test", p.adjust.method="BH")
p <- ggpubr::ggviolin(df, x="group", y="Phylostrata", fill="group",
color="transparent", add="boxplot", add.params=list(width=0.05,
color="black")) + theme(legend.position='none') +
ggpubr::stat_compare_means(method="anova", label.y=18) +
ggpubr::stat_compare_means(label="p.signif", label.y=17,
method="wilcox.test", ref.group="other", hide.ns=T) +
geom_hline(yintercept=median(df$Phylostrata[df$group=='other']),
linetype=2) +
geom_hline(yintercept=median(df$Phylostrata[df$group!='other']),
linetype=2)

### 6) labels
df_PSG <- xRDataLoader('Phylostratigraphy',
RData.location=RData.location)
df_tmp <- unique(df_PSG[,c("Phylostrata","Tax_name")])
lables <- paste0(df_tmp$Phylostrata, ' (', df_tmp$Tax_name, ')')
p + scale_y_continuous(breaks=0:18, limits=c(0,18),
labels=c('',lables,rep('',2))) +
theme(axis.text.y=element_text(size=7,color="black"),
axis.title.x=element_blank())

}
}
\seealso{
\code{\link{xAge}}
}
